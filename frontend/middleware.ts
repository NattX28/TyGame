import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

// real
const PUBLIC_PATHS = ["/", "/explore", "/login", "/register"];

// real
const PROTECTED_PATHS = [
  "/feed",
  "/profile",
  "/chat",
  "/community",
  "/party",
  "/friends",
];

const ADMIN_PATHS = ["/admin"];

// Combine all valid paths
const ALL_VALID_PATHS = [...PUBLIC_PATHS, ...PROTECTED_PATHS, ...ADMIN_PATHS];

export async function middleware(request: NextRequest) {
  const path = request.nextUrl.pathname;
  const token = request.cookies.get("Authorization")?.value;

  // ‡∏î‡∏∂‡∏á role ‡∏à‡∏≤‡∏Å token
  let userRole = null;
  if (token) {
    try {
      const payload = JSON.parse(atob(token.split(".")[1])); // decode JWT
      userRole = payload.role;
    } catch (err) {
      console.error("Invalid Token");
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô public path ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ public path
  const isPublicPath = PUBLIC_PATHS.some(
    (publicPath) => path === publicPath || path.startsWith(`${publicPath}/`)
  );

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô protected path ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ protected path
  const isProtectedPath = PROTECTED_PATHS.some(
    (protectedPath) =>
      path === protectedPath || path.startsWith(`${protectedPath}/`)
  );

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin path ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ admin path
  const isAdminPath = ADMIN_PATHS.some(
    (adminPath) => path === adminPath || path.startsWith(`${adminPath}/`)
  );

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ path ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö valid path ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô sub-path ‡∏Ç‡∏≠‡∏á valid path)
  const isValidPath = ALL_VALID_PATHS.some(
    (validPath) => path === validPath || path.startsWith(`${validPath}/`)
  );

  console.log(`üîç Middleware triggered for path: ${path}`);
  console.log(`   - Token: ${token ? "Yes" : "No"}`);
  console.log(`   - User Role: ${userRole || "None"}`);
  console.log(`   - isPublicPath: ${isPublicPath}`);
  console.log(`   - isProtectedPath: ${isProtectedPath}`);
  console.log(`   - isAdminPath: ${isAdminPath}`);
  console.log(`   - isValidPath: ${isValidPath}`);

  // ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏∏‡∏Å path ‡πÑ‡∏î‡πâ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
  // ‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏∏‡∏Å path ‡πÑ‡∏î‡πâ

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà valid path ‡πÉ‡∏´‡πâ Next.js ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ 404
  if (!isValidPath) {
    return NextResponse.next();
  }

  // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏∏‡∏Å path ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  // return NextResponse.next();

  // ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  
  // Handle authentication and authorization for valid paths
  if (!token && isProtectedPath) {
    return NextResponse.redirect(new URL("/login", request.url));
  }

  if (isAdminPath && userRole !== "admin") {
    return NextResponse.redirect(new URL("/login", request.url));
  }
}

export const config = {
  matcher: ["/((?!api|_next/static|_next/image|.*\\.png$).*)"],
};
